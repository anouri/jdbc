// *******************************************************************************
// * Copyright (C) 2018 International Business Machines Corporation
// * All Rights Reserved
// *******************************************************************************
// JDBCDb2Cloud.spl demonstrates how to 
// create a table 
// insert data into table
// select data from table 
// and drop table
// via JDBCRun operator.
// 
// To connect to database, the following parameters need to be specified:
// jdbcDriverLib : the jdbc driver library (download the jdbc driver and store it in opt folder, 
// e.g.   opt/db2jcc4.jar)
// jdbcClassName : the class name for jdbc driver (e.g. com.ibm.db2.jcc.DB2Driver)
// jdbcUrl       : the database URL. (e.g. jdbc:db2://<server:port>/<database>)
// jdbcUser      : the database user on whose behalf the connection is being made.
// jdbcPassword  : the database userâ€™s password.
// 
// In the SPL sample:
// create Creates a table on databce       
// insert operator demonstrates how to run SQL statement with parameter markers via statement/statementParamAttrs parameters
// select operator demonstrates how to run SQL statement from stream 
 
// ******************************************************************************

namespace application; 
use com.ibm.streamsx.jdbc::* ;


composite JDBCDb2Cloud
{
param
	expression<rstring> $jdbcDriverLib : getSubmissionTimeValue("jdbcDriverLib", "opt/db2jcc4.jar" );
	expression<rstring> $jdbcClassName : getSubmissionTimeValue("jdbcClassName", "com.ibm.db2.jcc.DB2Driver" );
	expression<rstring> $jdbcUrl       : getSubmissionTimeValue("jdbcUrl","jdbc:db2://dashdb-entry-yp-dal09-08.services.dal.bluemix.net:50000/BLUDB");
	expression<rstring> $jdbcUser      : getSubmissionTimeValue("jdbcUser","dash15202") ;
	expression<rstring> $jdbcPassword  : getSubmissionTimeValue("jdbcPassword","gvQ0O8_u_CcQ") ;
	
type
	insertSchema = int32 ID, rstring FNAME, rstring LNAME, int32 AGE,
		rstring GENDER, float32 SCORE, float64 TOTAL ;
	rsSchema = int32 ID, rstring FNAME, rstring LNAME, int32 AGE, rstring GENDER,
		float32 SCORE, float64 TOTAL ;
	selectSchema = rstring sql ;
graph
	stream<insertSchema> pulse = Beacon()
	{
		param
			iterations : 1u ;
		output
			pulse : ID = 1, FNAME = "Mike", LNAME = "Ward", AGE = 31, GENDER = "M",
				SCORE = 33.3w, TOTAL = 912.3l ;
	}

	stream<insertSchema> create = JDBCRun(pulse)
	{
		param
			jdbcDriverLib	: $jdbcDriverLib ;
			jdbcClassName	: $jdbcClassName ;
			jdbcUrl 	: $jdbcUrl ;
			jdbcUser	: $jdbcUser ;
			jdbcPassword 	: $jdbcPassword;
			statement 	: "CREATE TABLE JDBCRUN_SAMPLE (ID INTEGER NOT NULL, FNAME CHAR(10), LNAME CHAR(10), AGE INTEGER, GENDER CHAR(1), SCORE REAL, TOTAL DOUBLE)" ;

	}

	stream<insertSchema> insert = JDBCRun(create)
	{
		param
			jdbcDriverLib	: $jdbcDriverLib ;
			jdbcClassName	: $jdbcClassName ;
			jdbcUrl		: $jdbcUrl ;
			jdbcUser	: $jdbcUser ;
			jdbcPassword	: $jdbcPassword;
			statement	: "INSERT INTO JDBCRUN_SAMPLE (ID, FNAME, LNAME, AGE, GENDER, SCORE, TOTAL)
								VALUES (?, ?, ?, ?, ?, ?, ?)" ;
			statementParamAttrs : "ID, FNAME, LNAME, AGE, GENDER, SCORE, TOTAL" ;
	}

	stream<selectSchema> genSelect = Functor(insert)
	{
		output
			genSelect : sql =
				"SELECT ID, FNAME, LNAME, AGE, GENDER, SCORE, TOTAL FROM JDBCRUN_SAMPLE" ;
	}

	stream<rsSchema> select = JDBCRun(genSelect)
	{
		param
			jdbcDriverLib	: $jdbcDriverLib ;
			jdbcClassName	: $jdbcClassName ;
			jdbcUrl		: $jdbcUrl ;
			jdbcUser	: $jdbcUser ;
			jdbcPassword	: $jdbcPassword;
			statementAttr	: sql ;
	}

	() as printer = Custom(select)
	{
		logic
			onTuple select : 
				printStringLn((rstring) ID + "," + FNAME + "," + LNAME + "," +
				(rstring) AGE + "," + GENDER + "," +(rstring) SCORE + "," +(rstring)TOTAL) ;
	}

	/**
	* delay 20 secounds to check the database table
	*/
            stream<rsSchema> delayed = Delay(select)
            {
		param delay : 8.0;
	}


	stream<rsSchema> drop = JDBCRun(delayed)
	{
		param
			jdbcDriverLib : $jdbcDriverLib ;
			jdbcClassName : $jdbcClassName ;
			jdbcUrl : $jdbcUrl ;
			jdbcUser : $jdbcUser ;
			jdbcPassword : $jdbcPassword;
			statement : "DROP TABLE JDBCRUN_SAMPLE" ;
	}

}
