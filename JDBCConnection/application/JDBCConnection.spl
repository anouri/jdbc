
// *******************************************************************************
// * Copyright (C) 2015-2018 International Business Machines Corporation
// * All Rights Reserved
// *******************************************************************************
namespace application;
use com.ibm.streamsx.jdbc::*;
use com.ibm.streamsx.jdbc.types::* ;
/*******************************************************************************
 * JDBCConnection demonstrates how to use the Error Port with JDBCRun operator.
 * and how to check the SQL code to abort the PE.
 *
 * Before you begin create a test table on your DB2 database 
 * db2 "CREATE TABLE JDBCRUN_INSERT (ID INTEGER NOT NULL, FNAME CHAR(10), LNAME CHAR(10))"
 * 
 * Replace the value of jdbcUrl, jdbcUser and jdbcPassword with your DB2
 * database credentials 
 *
 * To get full message text from an SQLException.getMessage set the retrieveMessagesFromServerOnGetMessage 
 * property to true in jdbcUrl.
 *
 * Copy the DB2 jdbc driver library db2jcc4.jar in opt directory
 * Make and start the application.
 * $> make
 * $> streamtool submitjob output/application.JDBCConnection.sab
 * 
 * During the test check the DB2 table
 * * login in db2 server and run this command
 * $> db2 connect to <your-db-name> user <your-db-user> using <your-db-password>
 * $> db2 "select * from JDBCRUN_INSERT"
 * ID          FNAME      LNAME
 * ----------- ---------- ----------
 *         1 Fname_2    Lname_2
 *         2 Fname_3    Lname_3
 *         .....
 *         .......
 *
 * Now disconnect the database
 * for example unplug the Ethernet cable 
 * or stop your DB2 database (db2stop force)
 * And check the console output
 * sqlCode: -4499 sqlState: 08001 sqlMessage: Error for batch element #1: [jcc][t4][2030][11211][4.16.53] 
 * A communication error occurred during operations on the connection's underlying socket, socket input stream, 
 * Now plug the Ethernet cable again
 * Or restart your DB2 Database (db2start)
 * You can see the PEs are unhealthy and the job is terminate.
 *
 *******************************************************************************/

composite JDBCConnection {

	param
		expression<rstring> $jdbcDriverLib : getSubmissionTimeValue("jdbcDriverLib", "opt/db2jcc4.jar") ;
		expression<rstring> $jdbcClassName : getSubmissionTimeValue("jdbcClassName", "com.ibm.db2.jcc.DB2Driver") ;
		expression<rstring> $jdbcUrl: getSubmissionTimeValue("jdbcUrl", "jdbc:db2://<your-data-base>:50001/TESTDB2:retrieveMessagesFromServerOnGetMessage=true;");
		expression<rstring> $jdbcUser: getSubmissionTimeValue("jdbcUser", "db2inst1" );
		expression<rstring> $jdbcPassword: getSubmissionTimeValue("jdbcPassword", "db2Passw0rd" );
		expression<rstring> $trustStore : getSubmissionTimeValue("trustStore", "opt/keystore.jks") ;
		expression<rstring> $trustStorePassword : getSubmissionTimeValue("trustStorePassword", "sslPassw0rd") ;
 
	
	type
		resultSchema    = int32 ID, 
						rstring 	FNAME,
						rstring 	LNAME;
						
		insertSchema = 	int32 		ID, 
						rstring 	FNAME,
						rstring 	LNAME;


 	graph

		/*
		 * Data Generator
		 */
		
		 stream<insertSchema>  DataGen = Custom() {
			logic
 			onProcess: {
				for (int32 i in range(20)) {
					submit({ ID = i, FNAME	= "Fname_" + (rstring) i, LNAME	= "Lname_" + (rstring) i}, DataGen) ;
				}
				// prevent that final punct is sent
				while (true) {
					block(1.0);
				}
			}
			config placement: partitionColocation("jdbcrun");
			restartable : false; 
		}
		
		/** The runSql is a JDBCRun operator 
		*   It insert tuples into a table in database
		*/
 		(stream<resultSchema> runSql ; stream<tuple<insertSchema> inTuple, JdbcSqlStatus_T error> errors) =
 			JDBCRun(DataGen)
 		{
 			logic
 				onTuple DataGen : printStringLn((rstring) ID + ", " + FNAME + " , " +  LNAME) ;
 
 			param
				sslConnection : true;
				trustStore            : $trustStore;
				trustStorePassword    : $trustStorePassword;
				jdbcDriverLib         : $jdbcDriverLib ;
 				jdbcClassName         : $jdbcClassName ;
 				jdbcUrl               : $jdbcUrl ;
 				jdbcUser              : $jdbcUser ;
 				jdbcPassword          : $jdbcPassword ;
 				sqlStatusAttr         : "error" ;
				statement             : "INSERT INTO JDBCRUN_INSERT (ID, FNAME, LNAME) VALUES (?, ?, ?)";
				statementParamAttrs   : "ID, FNAME, LNAME";
 				sqlFailureAction      : "terminate";
				reconnectionPolicy    : "BoundedRetry";
				reconnectionBound     : 3;
				reconnectionInterval  : 1.0;
				checkConnection       : true;
 				
			config
				placement : partitionColocation("jdbcrun") ;
				restartable : false; 
 		}
  
		/** The printError is a Custom operator 
		*   In case of any SQL error it prints the SQL Code and SQL message
		*/
 		() as printError = Custom(errors)
 		{
 			logic
			onTuple errors : {
					printStringLn(" printError sqlCode: " +(rstring) error.sqlCode + ", sqlState: " +
					error.sqlState + ", sqlMessage: " + error.sqlMessage) ;
					// if checkConnection = true and any connection problem detected
					// the JDBCRun operator send a sqlCode = -1  
					if (( error.sqlCode == -1 ))
					{
						printStringLn("communication error occurred."); 
						
						// abort() terminates the PE 
						abort(); 								
					}
				}
				
			config
				placement : partitionColocation("jdbcrun") ;
				restartable : false; 
 		}
 
		/** The printSqlResults is a Custom operator 
		*   It prints the SQL results in case of SELECT SQL statement
		*/
  		() as printSqlResults = Custom(runSql)
 		{
 			logic
 				onTuple runSql : printStringLn((rstring) ID + ", " + FNAME + " , " +  LNAME) ;
 		}

 }

