/*#####################################################################
 # Copyright (C)2014, 2017 International Business Machines Corporation and
 # others. All Rights Reserved.
 #####################################################################

 // *******************************************************************************
 // The sample SPL application JDBCOracle demonstrates how to connect to an ORACLE database 
 // and select data from a table using JDBCRun operator.
 // It demonstrates also how to get the SQL message in case of any error.
 //
 // Required Streams Version = 4.1.x.x
 // Required JDBC Toolkit Version = 1.2.2
 // https://github.com/IBMStreams/streamsx.jdbc/releases/tag/v1.2.2
 // ORACLE jdbc driver version 7 or higher (ojdbc7.jar)
 // http://www.oracle.com/technetwork/database/features/jdbc/jdbc-drivers-12c-download-1958347.html
 //
 // To connect to database, the following parameters need to be specified:
 // jdbcDriverLib   : the jdbc driver libraries (download the jdbc driver file from oracle site 
 // and store it in the opt folder, e.g. opt/ ojdbc7.jar)
 // jdbcClassName   : the class name for ORACLE jdbc driver (oracle.jdbc.driver.OracleDriver)
 // jdbcUrl         : the database URL. (e.g. jdbc:oracle:thin:@<your database server>:1521/<your oracle Service name> )
 // dbcUser         :  the database user on whose behalf the connection is being made.
 // jdbcPassword    : the userâ€™s password.
 // sqlStatusAttr   : "error" ;
 // isolationLevel   : "READ_COMMITTED" ;
 // set the isolationLevel to "READ_COMMITTED for ORACLE database
 // In the SPL sample:
 // "select" operator demonstrates how to run SQL statement from stream attribute via statementAttr parameter
 // In this sample the JDBCRun operator connect to the database and read all rows from test table and 
 // write them into data/output.csv
 // The second output port "error" provide SQL code SQL Status and SQL message in case  of any SQL error.
 // *******************************************************************************/
 
 
 namespace application ;
 
 use com.ibm.streamsx.jdbc::* ;
 use com.ibm.streamsx.jdbc.types::* ;
 /*******************************************************************************
  * JDBCRunErrorPort demonstrates how to Error Port with JDBCRun operator.
  *******************************************************************************/
 composite JDBCOracle
 {
 	param
 		expression<rstring> $jdbcDriverLib : "opt/ojdbc7.jar" ;
 		expression<rstring> $jdbcClassName : "oracle.jdbc.driver.OracleDriver" ;
 		expression<rstring> $jdbcUrl : "jdbc:oracle:thin:@tskips21.ibm.com:1521/orcl.ibm.com" ;
 		expression<rstring> $jdbcUser : "streams" ;
 		expression<rstring> $jdbcPassword : "oraPassw0rd" ;
 
 	type
 		insertSchema = int32 ID, rstring NAME ;
 		rsSchema = int32 ID, rstring NAME ;
 		selectSchema = rstring sql ;
 	graph
 		stream<insertSchema> pulse = Beacon()
 		{
 			param
 				iterations : 1000u ;
 				initDelay : 5.0 ;
 		}
 
 		(stream<rsSchema> runSql ; stream<tuple<insertSchema> inTuple, JdbcSqlStatus_T error> errors) =
 			JDBCRun(pulse)
 		{
 			logic
 				state :
 				{
 					mutable int32 count = 0  ;
 				}
 			
 
 			//	mutable int32 n=0
 				onTuple pulse : printStringLn((rstring) count++) ;

 			param
 				jdbcDriverLib  : $jdbcDriverLib ;
 				jdbcClassName  : $jdbcClassName ;
 				jdbcUrl        : $jdbcUrl ;
 				jdbcUser       : $jdbcUser ;
 				jdbcPassword   : $jdbcPassword ;
 				statement      : "SELECT * FROM TEST" ;
 //				statement      : "SELECT * FROM TEST2" ;
 				sqlStatusAttr  : "error" ;
 				isolationLevel : "READ_COMMITTED" ;
 		}
 
 		() as errorprint = Custom(errors)
 		{
 			logic
 				onTuple errors : printStringLn("sqlCode: " +(rstring) error.sqlCode + ", sqlState: " +
 					error.sqlState + ", sqlMessage: " + error.sqlMessage) ;
 		}
 
 		() as runSqlprint = FileSink(runSql)
 		{
 			logic
 				onTuple runSql : printStringLn((rstring) ID + "," + NAME) ;
 			param
 				file : "output.csv" ;
 				
 		}
 
 }
